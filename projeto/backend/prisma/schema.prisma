datasource db {
    provider = "mysql"
    url      = env("DATABASE_URL")
}

generator client {
    provider = "prisma-client-js"
}

model usuario {
    idusuario    Int    @id @default(autoincrement())
    cpf          String @unique
    nome         String @db.VarChar(50)
    hash_senha   String @db.VarChar(255)
    email        String @unique @db.VarChar(100)
    papel        String @db.VarChar(30)
    usuario_tipo Int    @default(0)

    // Relações
    projetos        usuario_projeto[]
    tarefas         tarefa[]             @relation("UsuarioTarefa_gestor")
    comentarios     comentario[]
    responsaveis    responsavel_tarefa[]
    projetos_gestor projeto[]            @relation("UsuarioProjeto_gestor")
}

model projeto {
    idprojeto   Int               @id @default(autoincrement())
    nome        String            @unique @db.VarChar(50)
    valor       Decimal           @db.Decimal(10, 2)
    data_inicio DateTime          @db.Date
    prazo       DateTime          @db.Date
    status      String            @db.VarChar(50)
    descricao   String            @db.VarChar(1000)
    foto        Bytes             @db.LongBlob()
    id_gestor   Int
    usuarios    usuario_projeto[]
    gestor      usuario?          @relation("UsuarioProjeto_gestor", fields: [id_gestor], references: [idusuario], onDelete: Cascade)
    tarefa      tarefa[]
}

model tarefa {
    idtarefa           Int                  @id @default(autoincrement())
    nome               String               @db.VarChar(50)
    data_inicio        DateTime             @db.Date
    prazo              DateTime             @db.Date
    status             String               @default("Em andamento") @db.VarChar(90)
    descricao          String               @db.VarChar(1000)
    id_projeto         Int?
    id_gestor          Int?
    projeto            projeto?             @relation(fields: [id_projeto], references: [idprojeto], onDelete: Cascade, onUpdate: NoAction, map: "FK_tarefa_2")
    gestor             usuario?             @relation("UsuarioTarefa_gestor", fields: [id_gestor], references: [idusuario], onDelete: Cascade, onUpdate: NoAction, map: "FK_tarefa_3")
    comentario         comentario[]
    responsavel_tarefa responsavel_tarefa[]

    @@index([id_projeto], map: "FK_tarefa_2")
    @@index([id_gestor], map: "FK_tarefa_3")
}

model usuario_projeto {
    idusuario Int
    idprojeto Int
    usuario   usuario @relation(fields: [idusuario], references: [idusuario])
    projeto   projeto @relation(fields: [idprojeto], references: [idprojeto])

    @@id([idusuario, idprojeto])
}

model responsavel_tarefa {
    id_usuario Int
    id_tarefa  Int
    usuario    usuario @relation(fields: [id_usuario], references: [idusuario], onDelete: Cascade, onUpdate: NoAction, map: "FK_responsavel_tarefa_1")
    tarefa     tarefa  @relation(fields: [id_tarefa], references: [idtarefa], onDelete: Cascade, onUpdate: NoAction, map: "FK_responsavel_tarefa_2")

    @@id([id_tarefa, id_usuario])
    @@index([id_usuario], map: "FK_responsavel_tarefa_1")
}

model comentario {
    idcomentario Int      @id @default(autoincrement())
    texto        String?  @db.VarChar(1000)
    id_tarefa    Int?
    id_usuario   Int?
    tarefa       tarefa?  @relation(fields: [id_tarefa], references: [idtarefa], onDelete: Cascade, onUpdate: NoAction, map: "FK_comentario_2")
    usuario      usuario? @relation(fields: [id_usuario], references: [idusuario], onDelete: Cascade, onUpdate: NoAction, map: "FK_comentario_3")

    @@index([id_tarefa], map: "FK_comentario_2")
    @@index([id_usuario], map: "FK_comentario_3")
}

model todo {
    IDTODO      Int    @id @default(autoincrement())
    TITLE       String @db.VarChar(20)
    DESCRIPTION String @db.VarChar(255)
}
